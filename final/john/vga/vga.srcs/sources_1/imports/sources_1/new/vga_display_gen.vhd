--------------------------------------------------
-- Module Name:    vga_display_gen - behavioral --
--------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

use work.type_pkg.all;
use work.vga_pkg.all;

-- simulation library
library unisim;
use unisim.vcomponents.all;


entity vga_display_gen is
    port (
        clk       : in std_logic;
        clk_25    : in std_logic;

        hcount    : in std_logic_vector(10 downto 0);
        vcount    : in std_logic_vector(10 downto 0);
        blank     : in std_logic;

        bars      : in barArray;
        barNumSws : in std_logic_vector(1 downto 0);

        red       : out std_logic_vector(3 downto 0);
        green     : out std_logic_vector(3 downto 0);
        blue      : out std_logic_vector(3 downto 0)
    );
    
    
    -- force synthesizer to extract distributed ram for the
    -- displayrom signal, and not a block ram, because the block ram
    -- is entirely used to store the image.
    attribute rom_extract : string;
    attribute rom_extract of vga_display_gen: entity is "yes";
    attribute rom_style : string;
    attribute rom_style of vga_display_gen: entity is "distributed";
end vga_display_gen;



architecture behavioral of vga_display_gen is

  type colorRom is array(0 to 255) of std_logic_vector(3 downto 0);
  
  constant redRom: colorRom := (
  "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
  "0011","0011","0011","0011","0011","0011","0011","0011","0011","0011","0011",
  "0100","0100","0100","0100","0100","0100","0100","0100","0100","0100","0100",
  "0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101",
  "0110","0110","0110","0110","0110","0110","0110","0110","0110","0110","0110","0110","0110","0110","0110","0110","0110","0110","0110","0110","0110",
  "0111","0111","0111","0111","0111","0111","0111","0111","0111","0111","0111","0111","0111","0111","0111","0111","0111","0111","0111","0111","0111",
  "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
  "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
  "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
  "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
  "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
  "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
  "1000","1000","1000","1000","1000","1000","1000","1000","1000"
  );
  
  constant greenRom: colorRom := (
  "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
  "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
  "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
  "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
  "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
  "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
  "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
  "0111","0111","0111","0111","0111","0111","0111","0111","0111","0111","0111","0111","0111","0111","0111","0111","0111","0111","0111","0111","0111",
  "0110","0110","0110","0110","0110","0110","0110","0110","0110","0110","0110","0110","0110","0110","0110","0110","0110","0110","0110","0110","0110",
  "0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101",
  "0100","0100","0100","0100","0100","0100","0100","0100","0100","0100","0100","0100","0100","0100","0100","0100","0100","0100","0100","0100","0100",
  "0011","0011","0011","0011","0011","0011","0011","0011","0011","0011","0011","0011","0011","0011","0011","0011","0011","0011","0011","0011","0011",
  "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010"
  );
  
  constant blueRom: colorRom := (
  "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
  "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
  "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
  "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
  "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
  "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
  "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
  "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
  "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
  "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
  "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
  "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
  "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010"
  );
  
  
  signal numBars    : integer := 0;
  signal pxWidth    : integer := 0;
  signal pxSpacingL : integer := 0;
  signal pxSpacingR : integer := 0;
  signal currentBar : std_logic_vector(7 downto 0);
  
  
  -- difference in range 0-64 between the vga counters and mouse position
  signal xdiff: std_logic_vector(6 downto 0) := (others => '0');
  signal ydiff: std_logic_vector(6 downto 0) := (others => '0');

begin

    -- compute xdiff
    x_diff: process(clk)
    variable temp_diff: std_logic_vector(10 downto 0) := (others => '0');
    begin
        if rising_edge(clk) then
            temp_diff := hcount - ('0' & xpos);
            xdiff <= temp_diff(6 downto 0);
        end if;
    end process x_diff;

    -- compute ydiff
    y_diff: process(clk)
    variable temp_diff: std_logic_vector(10 downto 0) := (others => '0');
    begin
        if rising_edge(clk) then
            temp_diff := vcount - ('0' & ypos);
            ydiff <= temp_diff(6 downto 0);
        end if;
    end process y_diff;

    process(bars)
    begin
      case (bars) is
        when "00" =>
          numBars <= 64;
          pxWidth <= 8;
          pxSpacingL <= 1;
          pxSpacingR <= 1; 
        when "01" =>
          numBars <= 32;
          pxWidth <= 16;
          pxSpacingL <= 2;
          pxSpacingR <= 2;
        when "11" =>
          numBars <= 16;
          pxWidth <= 34;
          pxSpacingL <= 3;
          pxSpacingR <= 3;
        when others =>
          -- Same as "11"
          numBars <= 16;
          pxWidth <= 34;
          pxSpacingL <= 3;
          pxSpacingR <= 3;
      end case;
    end process;


    process(clk_25)
    begin
      if rising_edge(clk_25) then
        -- if in visible part of screen
        if blank = '0' then
          red <= "1000";
          green <= "1000";
          blue <= "1000"; 

        else

          red <= (others => '0');
          green <= (others => '0');
          blue <= (others => '0');
        
        end if;
        
      end if;
    end process;


end behavioral;
