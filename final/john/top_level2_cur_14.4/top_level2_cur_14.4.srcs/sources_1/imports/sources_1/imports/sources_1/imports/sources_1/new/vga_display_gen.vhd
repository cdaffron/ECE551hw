--------------------------------------------------
-- Module Name:    vga_display_gen - behavioral --
--------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
--use ieee.std_logic_arith.all;
--use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

use work.type_pkg.all;
use work.vga_pkg.all;

-- simulation library
library unisim;
use unisim.vcomponents.all;


entity vga_display_gen is
    port (
        clk       : in std_logic;
        clk_25    : in std_logic;

        hcount    : in std_logic_vector(10 downto 0);
        vcount    : in std_logic_vector(10 downto 0);
        blank     : in std_logic;

        bars      : in barArray;
        barNumSws : in std_logic_vector(1 downto 0);

        red       : out std_logic_vector(3 downto 0);
        green     : out std_logic_vector(3 downto 0);
        blue      : out std_logic_vector(3 downto 0)
    );
    
    
    -- force synthesizer to extract distributed ram for the
    -- displayrom signal, and not a block ram, because the block ram
    -- is entirely used to store the image.
    attribute rom_extract : string;
    attribute rom_extract of vga_display_gen: entity is "yes";
    attribute rom_style : string;
    attribute rom_style of vga_display_gen: entity is "distributed";
end vga_display_gen;



architecture behavioral of vga_display_gen is

  constant fake_bars : barArray := (
    x"00",x"04",x"08",x"0c",x"10",x"14",x"18",x"1c",x"20",x"24",
    x"28",x"2c",x"30",x"34",x"38",x"3c",x"40",x"44",x"48",x"4c",
    x"50",x"54",x"58",x"5c",x"60",x"64",x"68",x"6c",x"70",x"74",
    x"78",x"7c",x"80",x"84",x"88",x"8c",x"90",x"94",x"98",x"9c",
    x"a0",x"a4",x"a8",x"ac",x"b0",x"b4",x"b8",x"bc",x"c0",x"c4",
    x"c8",x"cc",x"d0",x"d4",x"d8",x"dc",x"e0",x"e4",x"e8",x"ec",
    x"f0",x"f4",x"f8",x"fc"
  );


  type colorRom is array(0 to 255) of std_logic_vector(3 downto 0);

  constant redRom: colorRom := (
    "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
    "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
    "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
    "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
    "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
    "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
    "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
    "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
    "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
    "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
    "1000","1000","1000","1000","1000","1000","1000","1000",
    "0111","0111","0111","0111","0111","0111","0111","0111","0111","0111","0111","0111",
    "0111","0111","0111","0111","0111","0111","0111","0111","0111",
    "0110","0110","0110","0110","0110","0110","0110","0110","0110","0110","0110","0110",
    "0110","0110","0110","0110","0110","0110","0110","0110","0110",
    "0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101",
    "0101","0101","0101","0101","0101","0101","0101","0101","0101","0101",
    "0100","0100","0100","0100","0100","0100","0100","0100","0100","0100","0100","0100",
    "0100","0100","0100","0100","0100","0100","0100","0100","0100",
    "0011","0011","0011","0011","0011","0011","0011","0011","0011","0011","0011","0011",
    "0011","0011","0011","0011","0011","0011","0011","0011","0011",
    "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
    "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010"
  );
  
  constant greenRom: colorRom := (
    "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
    "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
    "0011","0011","0011","0011","0011","0011","0011","0011","0011","0011","0011",
    "0011","0011","0011","0011","0011","0011","0011","0011","0011","0011",
    "0100","0100","0100","0100","0100","0100","0100","0100","0100","0100","0100",
    "0100","0100","0100","0100","0100","0100","0100","0100","0100","0100",
    "0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101",
    "0101","0101","0101","0101","0101","0101","0101","0101","0101","0101","0101",
    "0110","0110","0110","0110","0110","0110","0110","0110","0110","0110","0110",
    "0110","0110","0110","0110","0110","0110","0110","0110","0110","0110",
    "0111","0111","0111","0111","0111","0111","0111","0111","0111","0111","0111",
    "0111","0111","0111","0111","0111","0111","0111","0111","0111","0111",
    "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
    "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
    "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
    "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
    "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
    "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
    "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
    "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
    "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
    "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
    "1000","1000","1000","1000","1000","1000","1000","1000","1000","1000","1000",
    "1000","1000","1000","1000","1000","1000","1000","1000"
  );
  
  constant blueRom: colorRom := (
    "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
    "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
    "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
    "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
    "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
    "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
    "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
    "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
    "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
    "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
    "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
    "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010",
    "0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010","0010"
  );
  
  type barDispRom is array(0 to 639) of std_logic;
  
  constant bars64Rom : barDispRom := (
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0',
    '0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0'
  );

  constant bars32Rom : barDispRom := (
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0',
    '0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0'
  );

  constant bars16Rom : barDispRom := (
    '0','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','0',
    '0','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','0',
    '0','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','0',
    '0','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','0',
    '0','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','0',
    '0','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','0',
    '0','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','0',
    '0','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','0',
    '0','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','0',
    '0','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','0',
    '0','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','0',
    '0','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','0',
    '0','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','0',
    '0','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','0',
    '0','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','0',
    '0','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','0'
  );

  constant fakeBars : bararray := (
    x"00",x"04",x"08",x"0c",x"10",x"14",x"18",x"1c",x"20",x"24",x"28",
    x"2c",x"30",x"34",x"38",x"3c",x"40",x"44",x"48",x"4c",x"50",x"54",
    x"58",x"5c",x"60",x"64",x"68",x"6c",x"70",x"74",x"78",x"7c",x"80",
    x"84",x"88",x"8c",x"90",x"94",x"98",x"9c",x"a0",x"a4",x"a8",x"ac",
    x"b0",x"b4",x"b8",x"bc",x"c0",x"c4",x"c8",x"cc",x"d0",x"d4",x"d8",
    x"dc",x"e0",x"e4",x"e8",x"ec",x"f0",x"f4",x"f8",x"fc"
  );

  signal numBars    : integer := 0;
  signal curBarNum  : integer := 0;
  signal shiftVal   : integer := 0;
  signal heightInd  : integer := 0;
  signal curBarRom  : barDispRom;
  signal currentBar : std_logic_vector(7 downto 0);

  signal redVal     : std_logic_vector(3 downto 0);
  signal greenVal   : std_logic_vector(3 downto 0);
  signal blueVal    : std_logic_vector(3 downto 0);

  signal barRomVal  : std_logic := '0';

  
  signal xpos: std_logic_vector(9 downto 0) := (others => '0');
  signal ypos: std_logic_vector(9 downto 0) := (others => '0');


  signal curBarH : std_logic_vector(7 downto 0);

  --***640x480@60Hz***--  
  --constant FRAME_WIDTH : natural := 640;
  --constant FRAME_HEIGHT : natural := 480;
  --constant H_FP : natural := 16; --H front porch width (pixels)
  --constant H_PW : natural := 96; --H sync pulse width (pixels)
  --constant H_MAX : natural := 800; --H total period (pixels)
  --constant V_FP : natural := 10; --V front porch width (lines)
  --constant V_PW : natural := 2; --V sync pulse width (lines)
  --constant V_MAX : natural := 525; --V total period (lines)
  --constant H_POL : std_logic := '0';
  --constant V_POL : std_logic := '0';

  constant dispXOrigin : integer := 16; --H front porch width (pixels)
  constant dispYOrigin : integer := 10; --V front porch width (lines)
  signal actX : std_logic_vector(9 downto 0); -- Actual X position
  signal actY : std_logic_vector(9 downto 0); -- Actual Y position
  signal relX : std_logic_vector(9 downto 0); -- X position w.t.r bottom left corner of screen
  signal relY : std_logic_vector(9 downto 0); -- Y position w.t.r bottom left corner of screen

begin

--    -- compute xpos
--    x_pos: process(clk)
--    variable temp_x   : std_logic_vector(9 downto 0) := (others => '0');
--    begin
--        if rising_edge(clk) then
--            temp_x := hcount(9 downto 0);
--            actX <= temp_x;
--        end if;
--    end process x_pos;

    actX <= hcount(9 downto 0) when rising_edge(clk);  
    relX <= std_logic_vector(unsigned(actX) - dispXOrigin);
    actY <= vcount(9 downto 0) when rising_edge(clk);
    relY <= std_logic_vector((479 + dispYorigin) - unsigned(actY));

--    -- compute ydiff
--    y_pos: process(clk)
--    variable temp_y   : std_logic_vector(9 downto 0) := (others => '0');
--    begin
--        if rising_edge(clk) then
--            temp_y := vcount(9 downto 0);
--            actY <= temp_y;
--        end if;
--    end process y_pos;

--    relY <= std_logic_vector((479 + dispYorigin) - unsigned(actY));


    -- for now, let two rows be equivalent to each 'height' unit in the barArray
    heightInd <= to_integer(shift_right(unsigned(actY), 2)) when rising_edge(clk);
    redVal <= redRom(heightInd) when rising_edge(clk);
    greenVal <= greenRom(heightInd) when rising_edge(clk);
    blueVal <= blueRom(heightInd) when rising_edge(clk);

    barRomVal <= curBarRom(to_integer(unsigned(relX))) when rising_edge(clk);
    curBarH <= fake_bars(to_integer(shift_right(unsigned(relX), shiftVal))) when rising_edge(clk);

    process(barNumSws)
    begin
      case (barNumSws) is
        when "00" =>
          numBars <= 64;
          curBarRom <= bars64Rom;
          shiftVal <= 6;
        when "01" =>
          numBars <= 32;
          curBarRom <= bars32Rom;
          shiftVal <= 5;
        when "11" =>
          numBars <= 16;
          curBarRom <= bars16Rom;
          shiftVal <= 4;
        when others =>
          -- Same as "11"
          numBars <= 16;
          curBarRom <= bars16Rom;
          shiftVal <= 4;
      end case;
    end process;

    process(clk_25)
    begin
      if rising_edge(clk_25) then
        -- if in visible part of screen
        if blank = '0' then 
          if barRomVal = '1' then 
            if curBarH >= relY then
              red <= redVal;
              green <= greenVal;
              blue <= blueVal;
            else
              red <= (others => '0');
              green <= (others => '0');
              blue <= (others => '0');
            end if;
          else
            red <= (others => '0');
            green <= (others => '0');
            blue <= (others => '0');
          end if;
        else
          red <= (others => '0');
          green <= (others => '0');
          blue <= (others => '0');        
        end if;
        
      end if;
    end process;


end behavioral;
